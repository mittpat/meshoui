#include "Meshoui.h"
#include "DeviceVk.h"
#include "SwapChainVk.h"

#include <algorithm>
#include <array>
#include <cmath>
#include <cstring>
#include <fstream>
#include <numeric>

// glsl_shader.vert, compiled with:
// # glslangValidator -V -x -o glsl_shader.vert.u32 glsl_shader.vert
static uint32_t glsl_shader_vert_spv[] =
{
    // 7.11.3009
    0x07230203,0x00010000,0x00080007,0x0000009d,0x00000000,0x00020011,0x00000001,0x0006000b,
    0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
    0x000c000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x0000000c,0x00000018,0x00000032,
    0x00000039,0x00000048,0x0000005a,0x0000008c,0x00030003,0x00000002,0x000001c2,0x00040005,
    0x00000004,0x6e69616d,0x00000000,0x00050005,0x0000000a,0x74726556,0x61447865,0x00006174,
    0x00050006,0x0000000a,0x00000000,0x74726576,0x00007865,0x00050006,0x0000000a,0x00000001,
    0x6d726f6e,0x00006c61,0x00060006,0x0000000a,0x00000002,0x63786574,0x64726f6f,0x00000000,
    0x00040006,0x0000000a,0x00000003,0x004e4254,0x00040005,0x0000000c,0x4474756f,0x00617461,
    0x00060005,0x00000011,0x73755075,0x6e6f4368,0x6e617473,0x00000074,0x00070006,0x00000011,
    0x00000000,0x66696e75,0x4d6d726f,0x6c65646f,0x00000000,0x00060006,0x00000011,0x00000001,
    0x66696e75,0x566d726f,0x00776569,0x00080006,0x00000011,0x00000002,0x66696e75,0x506d726f,
    0x656a6f72,0x6f697463,0x0000006e,0x00030005,0x00000013,0x00006370,0x00060005,0x00000018,
    0x74726576,0x6f507865,0x69746973,0x00006e6f,0x00060005,0x00000032,0x74726576,0x6f4e7865,
    0x6c616d72,0x00000000,0x00060005,0x00000039,0x74726576,0x65547865,0x6f6f6378,0x00006472,
    0x00030005,0x0000003e,0x00000054,0x00060005,0x00000048,0x74726576,0x61547865,0x6e65676e,
    0x00000074,0x00030005,0x00000050,0x00000042,0x00060005,0x0000005a,0x74726576,0x69427865,
    0x676e6174,0x00746e65,0x00030005,0x00000062,0x0000004e,0x00060005,0x0000008a,0x505f6c67,
    0x65567265,0x78657472,0x00000000,0x00060006,0x0000008a,0x00000000,0x505f6c67,0x7469736f,
    0x006e6f69,0x00070006,0x0000008a,0x00000001,0x505f6c67,0x746e696f,0x657a6953,0x00000000,
    0x00070006,0x0000008a,0x00000002,0x435f6c67,0x4470696c,0x61747369,0x0065636e,0x00070006,
    0x0000008a,0x00000003,0x435f6c67,0x446c6c75,0x61747369,0x0065636e,0x00030005,0x0000008c,
    0x00000000,0x00030047,0x0000000a,0x00000002,0x00040047,0x0000000c,0x0000001e,0x00000000,
    0x00040048,0x00000011,0x00000000,0x00000005,0x00050048,0x00000011,0x00000000,0x00000023,
    0x00000000,0x00050048,0x00000011,0x00000000,0x00000007,0x00000010,0x00040048,0x00000011,
    0x00000001,0x00000005,0x00050048,0x00000011,0x00000001,0x00000023,0x00000040,0x00050048,
    0x00000011,0x00000001,0x00000007,0x00000010,0x00040048,0x00000011,0x00000002,0x00000005,
    0x00050048,0x00000011,0x00000002,0x00000023,0x00000080,0x00050048,0x00000011,0x00000002,
    0x00000007,0x00000010,0x00030047,0x00000011,0x00000002,0x00040047,0x00000018,0x0000001e,
    0x00000000,0x00040047,0x00000032,0x0000001e,0x00000002,0x00040047,0x00000039,0x0000001e,
    0x00000001,0x00040047,0x00000048,0x0000001e,0x00000003,0x00040047,0x0000005a,0x0000001e,
    0x00000004,0x00050048,0x0000008a,0x00000000,0x0000000b,0x00000000,0x00050048,0x0000008a,
    0x00000001,0x0000000b,0x00000001,0x00050048,0x0000008a,0x00000002,0x0000000b,0x00000003,
    0x00050048,0x0000008a,0x00000003,0x0000000b,0x00000004,0x00030047,0x0000008a,0x00000002,
    0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,
    0x00040017,0x00000007,0x00000006,0x00000003,0x00040017,0x00000008,0x00000006,0x00000002,
    0x00040018,0x00000009,0x00000007,0x00000003,0x0006001e,0x0000000a,0x00000007,0x00000007,
    0x00000008,0x00000009,0x00040020,0x0000000b,0x00000003,0x0000000a,0x0004003b,0x0000000b,
    0x0000000c,0x00000003,0x00040015,0x0000000d,0x00000020,0x00000001,0x0004002b,0x0000000d,
    0x0000000e,0x00000000,0x00040017,0x0000000f,0x00000006,0x00000004,0x00040018,0x00000010,
    0x0000000f,0x00000004,0x0005001e,0x00000011,0x00000010,0x00000010,0x00000010,0x00040020,
    0x00000012,0x00000009,0x00000011,0x0004003b,0x00000012,0x00000013,0x00000009,0x00040020,
    0x00000014,0x00000009,0x00000010,0x00040020,0x00000017,0x00000001,0x00000007,0x0004003b,
    0x00000017,0x00000018,0x00000001,0x0004002b,0x00000006,0x0000001a,0x3f800000,0x00040020,
    0x00000024,0x00000003,0x00000007,0x0004002b,0x0000000d,0x00000026,0x00000001,0x0004003b,
    0x00000017,0x00000032,0x00000001,0x0004002b,0x0000000d,0x00000037,0x00000002,0x00040020,
    0x00000038,0x00000001,0x00000008,0x0004003b,0x00000038,0x00000039,0x00000001,0x00040020,
    0x0000003b,0x00000003,0x00000008,0x00040020,0x0000003d,0x00000007,0x00000007,0x0004003b,
    0x00000017,0x00000048,0x00000001,0x0004003b,0x00000017,0x0000005a,0x00000001,0x0004002b,
    0x0000000d,0x00000073,0x00000003,0x0004002b,0x00000006,0x00000077,0x00000000,0x00040020,
    0x00000085,0x00000003,0x00000009,0x00040015,0x00000087,0x00000020,0x00000000,0x0004002b,
    0x00000087,0x00000088,0x00000001,0x0004001c,0x00000089,0x00000006,0x00000088,0x0006001e,
    0x0000008a,0x0000000f,0x00000006,0x00000089,0x00000089,0x00040020,0x0000008b,0x00000003,
    0x0000008a,0x0004003b,0x0000008b,0x0000008c,0x00000003,0x00040020,0x0000009b,0x00000003,
    0x0000000f,0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,
    0x0004003b,0x0000003d,0x0000003e,0x00000007,0x0004003b,0x0000003d,0x00000050,0x00000007,
    0x0004003b,0x0000003d,0x00000062,0x00000007,0x00050041,0x00000014,0x00000015,0x00000013,
    0x0000000e,0x0004003d,0x00000010,0x00000016,0x00000015,0x0004003d,0x00000007,0x00000019,
    0x00000018,0x00050051,0x00000006,0x0000001b,0x00000019,0x00000000,0x00050051,0x00000006,
    0x0000001c,0x00000019,0x00000001,0x00050051,0x00000006,0x0000001d,0x00000019,0x00000002,
    0x00070050,0x0000000f,0x0000001e,0x0000001b,0x0000001c,0x0000001d,0x0000001a,0x00050091,
    0x0000000f,0x0000001f,0x00000016,0x0000001e,0x00050051,0x00000006,0x00000020,0x0000001f,
    0x00000000,0x00050051,0x00000006,0x00000021,0x0000001f,0x00000001,0x00050051,0x00000006,
    0x00000022,0x0000001f,0x00000002,0x00060050,0x00000007,0x00000023,0x00000020,0x00000021,
    0x00000022,0x00050041,0x00000024,0x00000025,0x0000000c,0x0000000e,0x0003003e,0x00000025,
    0x00000023,0x00050041,0x00000014,0x00000027,0x00000013,0x0000000e,0x0004003d,0x00000010,
    0x00000028,0x00000027,0x0006000c,0x00000010,0x00000029,0x00000001,0x00000022,0x00000028,
    0x00040054,0x00000010,0x0000002a,0x00000029,0x00050051,0x0000000f,0x0000002b,0x0000002a,
    0x00000000,0x0008004f,0x00000007,0x0000002c,0x0000002b,0x0000002b,0x00000000,0x00000001,
    0x00000002,0x00050051,0x0000000f,0x0000002d,0x0000002a,0x00000001,0x0008004f,0x00000007,
    0x0000002e,0x0000002d,0x0000002d,0x00000000,0x00000001,0x00000002,0x00050051,0x0000000f,
    0x0000002f,0x0000002a,0x00000002,0x0008004f,0x00000007,0x00000030,0x0000002f,0x0000002f,
    0x00000000,0x00000001,0x00000002,0x00060050,0x00000009,0x00000031,0x0000002c,0x0000002e,
    0x00000030,0x0004003d,0x00000007,0x00000033,0x00000032,0x00050091,0x00000007,0x00000034,
    0x00000031,0x00000033,0x0006000c,0x00000007,0x00000035,0x00000001,0x00000045,0x00000034,
    0x00050041,0x00000024,0x00000036,0x0000000c,0x00000026,0x0003003e,0x00000036,0x00000035,
    0x0004003d,0x00000008,0x0000003a,0x00000039,0x00050041,0x0000003b,0x0000003c,0x0000000c,
    0x00000037,0x0003003e,0x0000003c,0x0000003a,0x00050041,0x00000014,0x0000003f,0x00000013,
    0x0000000e,0x0004003d,0x00000010,0x00000040,0x0000003f,0x00050051,0x0000000f,0x00000041,
    0x00000040,0x00000000,0x0008004f,0x00000007,0x00000042,0x00000041,0x00000041,0x00000000,
    0x00000001,0x00000002,0x00050051,0x0000000f,0x00000043,0x00000040,0x00000001,0x0008004f,
    0x00000007,0x00000044,0x00000043,0x00000043,0x00000000,0x00000001,0x00000002,0x00050051,
    0x0000000f,0x00000045,0x00000040,0x00000002,0x0008004f,0x00000007,0x00000046,0x00000045,
    0x00000045,0x00000000,0x00000001,0x00000002,0x00060050,0x00000009,0x00000047,0x00000042,
    0x00000044,0x00000046,0x0004003d,0x00000007,0x00000049,0x00000048,0x00050091,0x00000007,
    0x0000004a,0x00000047,0x00000049,0x00050051,0x00000006,0x0000004b,0x0000004a,0x00000000,
    0x00050051,0x00000006,0x0000004c,0x0000004a,0x00000001,0x00050051,0x00000006,0x0000004d,
    0x0000004a,0x00000002,0x00060050,0x00000007,0x0000004e,0x0000004b,0x0000004c,0x0000004d,
    0x0006000c,0x00000007,0x0000004f,0x00000001,0x00000045,0x0000004e,0x0003003e,0x0000003e,
    0x0000004f,0x00050041,0x00000014,0x00000051,0x00000013,0x0000000e,0x0004003d,0x00000010,
    0x00000052,0x00000051,0x00050051,0x0000000f,0x00000053,0x00000052,0x00000000,0x0008004f,
    0x00000007,0x00000054,0x00000053,0x00000053,0x00000000,0x00000001,0x00000002,0x00050051,
    0x0000000f,0x00000055,0x00000052,0x00000001,0x0008004f,0x00000007,0x00000056,0x00000055,
    0x00000055,0x00000000,0x00000001,0x00000002,0x00050051,0x0000000f,0x00000057,0x00000052,
    0x00000002,0x0008004f,0x00000007,0x00000058,0x00000057,0x00000057,0x00000000,0x00000001,
    0x00000002,0x00060050,0x00000009,0x00000059,0x00000054,0x00000056,0x00000058,0x0004003d,
    0x00000007,0x0000005b,0x0000005a,0x00050091,0x00000007,0x0000005c,0x00000059,0x0000005b,
    0x00050051,0x00000006,0x0000005d,0x0000005c,0x00000000,0x00050051,0x00000006,0x0000005e,
    0x0000005c,0x00000001,0x00050051,0x00000006,0x0000005f,0x0000005c,0x00000002,0x00060050,
    0x00000007,0x00000060,0x0000005d,0x0000005e,0x0000005f,0x0006000c,0x00000007,0x00000061,
    0x00000001,0x00000045,0x00000060,0x0003003e,0x00000050,0x00000061,0x00050041,0x00000014,
    0x00000063,0x00000013,0x0000000e,0x0004003d,0x00000010,0x00000064,0x00000063,0x00050051,
    0x0000000f,0x00000065,0x00000064,0x00000000,0x0008004f,0x00000007,0x00000066,0x00000065,
    0x00000065,0x00000000,0x00000001,0x00000002,0x00050051,0x0000000f,0x00000067,0x00000064,
    0x00000001,0x0008004f,0x00000007,0x00000068,0x00000067,0x00000067,0x00000000,0x00000001,
    0x00000002,0x00050051,0x0000000f,0x00000069,0x00000064,0x00000002,0x0008004f,0x00000007,
    0x0000006a,0x00000069,0x00000069,0x00000000,0x00000001,0x00000002,0x00060050,0x00000009,
    0x0000006b,0x00000066,0x00000068,0x0000006a,0x0004003d,0x00000007,0x0000006c,0x00000032,
    0x00050091,0x00000007,0x0000006d,0x0000006b,0x0000006c,0x00050051,0x00000006,0x0000006e,
    0x0000006d,0x00000000,0x00050051,0x00000006,0x0000006f,0x0000006d,0x00000001,0x00050051,
    0x00000006,0x00000070,0x0000006d,0x00000002,0x00060050,0x00000007,0x00000071,0x0000006e,
    0x0000006f,0x00000070,0x0006000c,0x00000007,0x00000072,0x00000001,0x00000045,0x00000071,
    0x0003003e,0x00000062,0x00000072,0x0004003d,0x00000007,0x00000074,0x0000003e,0x0004003d,
    0x00000007,0x00000075,0x00000050,0x0004003d,0x00000007,0x00000076,0x00000062,0x00050051,
    0x00000006,0x00000078,0x00000074,0x00000000,0x00050051,0x00000006,0x00000079,0x00000074,
    0x00000001,0x00050051,0x00000006,0x0000007a,0x00000074,0x00000002,0x00050051,0x00000006,
    0x0000007b,0x00000075,0x00000000,0x00050051,0x00000006,0x0000007c,0x00000075,0x00000001,
    0x00050051,0x00000006,0x0000007d,0x00000075,0x00000002,0x00050051,0x00000006,0x0000007e,
    0x00000076,0x00000000,0x00050051,0x00000006,0x0000007f,0x00000076,0x00000001,0x00050051,
    0x00000006,0x00000080,0x00000076,0x00000002,0x00060050,0x00000007,0x00000081,0x00000078,
    0x00000079,0x0000007a,0x00060050,0x00000007,0x00000082,0x0000007b,0x0000007c,0x0000007d,
    0x00060050,0x00000007,0x00000083,0x0000007e,0x0000007f,0x00000080,0x00060050,0x00000009,
    0x00000084,0x00000081,0x00000082,0x00000083,0x00050041,0x00000085,0x00000086,0x0000000c,
    0x00000073,0x0003003e,0x00000086,0x00000084,0x00050041,0x00000014,0x0000008d,0x00000013,
    0x00000037,0x0004003d,0x00000010,0x0000008e,0x0000008d,0x00050041,0x00000014,0x0000008f,
    0x00000013,0x00000026,0x0004003d,0x00000010,0x00000090,0x0000008f,0x00050092,0x00000010,
    0x00000091,0x0000008e,0x00000090,0x00050041,0x00000014,0x00000092,0x00000013,0x0000000e,
    0x0004003d,0x00000010,0x00000093,0x00000092,0x00050092,0x00000010,0x00000094,0x00000091,
    0x00000093,0x0004003d,0x00000007,0x00000095,0x00000018,0x00050051,0x00000006,0x00000096,
    0x00000095,0x00000000,0x00050051,0x00000006,0x00000097,0x00000095,0x00000001,0x00050051,
    0x00000006,0x00000098,0x00000095,0x00000002,0x00070050,0x0000000f,0x00000099,0x00000096,
    0x00000097,0x00000098,0x0000001a,0x00050091,0x0000000f,0x0000009a,0x00000094,0x00000099,
    0x00050041,0x0000009b,0x0000009c,0x0000008c,0x0000000e,0x0003003e,0x0000009c,0x0000009a,
    0x000100fd,0x00010038
};

// glsl_shader.frag, compiled with:
// # glslangValidator -V -x -o glsl_shader.frag.u32 glsl_shader.frag
static uint32_t glsl_shader_frag_spv[] =
{
    // 7.11.3009
    0x07230203,0x00010000,0x00080007,0x00000098,0x00000000,0x00020011,0x00000001,0x0006000b,
    0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
    0x0007000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x0000000e,0x0000002c,0x00030010,
    0x00000004,0x00000007,0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,
    0x00000000,0x00050005,0x00000009,0x63786574,0x64726f6f,0x00000000,0x00050005,0x0000000c,
    0x74726556,0x61447865,0x00006174,0x00050006,0x0000000c,0x00000000,0x74726576,0x00007865,
    0x00050006,0x0000000c,0x00000001,0x6d726f6e,0x00006c61,0x00060006,0x0000000c,0x00000002,
    0x63786574,0x64726f6f,0x00000000,0x00040006,0x0000000c,0x00000003,0x004e4254,0x00040005,
    0x0000000e,0x61446e69,0x00006174,0x00060005,0x0000001e,0x74786574,0x41657275,0x6569626d,
    0x0000746e,0x00080005,0x00000022,0x66696e75,0x546d726f,0x75747865,0x6d416572,0x6e656962,
    0x00000074,0x00060005,0x00000026,0x74786574,0x44657275,0x75666669,0x00006573,0x00080005,
    0x00000027,0x66696e75,0x546d726f,0x75747865,0x69446572,0x73756666,0x00000065,0x00050005,
    0x0000002c,0x67617266,0x746e656d,0x00000000,0x00060005,0x0000003a,0x74786574,0x4e657275,
    0x616d726f,0x0000006c,0x00080005,0x0000003b,0x66696e75,0x546d726f,0x75747865,0x6f4e6572,
    0x6c616d72,0x00000000,0x00090005,0x00000040,0x74786574,0x4e657275,0x616d726f,0x6f775f6c,
    0x73646c72,0x65636170,0x00000000,0x00090005,0x0000005b,0x6867696c,0x72694474,0x69746365,
    0x775f6e6f,0x646c726f,0x63617073,0x00000065,0x00040005,0x0000005c,0x636f6c42,0x0000006b,
    0x00070006,0x0000005c,0x00000000,0x77656976,0x69736f50,0x6e6f6974,0x00000000,0x00070006,
    0x0000005c,0x00000001,0x6867696c,0x736f5074,0x6f697469,0x0000006e,0x00050005,0x0000005e,
    0x66696e75,0x446d726f,0x00617461,0x00060005,0x00000067,0x66666964,0x46657375,0x6f746361,
    0x00000072,0x00080005,0x00000070,0x44657965,0x63657269,0x6e6f6974,0x726f775f,0x7073646c,
    0x00656361,0x00090005,0x00000077,0x6c666572,0x44746365,0x63657269,0x6e6f6974,0x726f775f,
    0x7073646c,0x00656361,0x00060005,0x0000007c,0x63657073,0x72616c75,0x74636146,0x0000726f,
    0x00060005,0x00000083,0x74786574,0x53657275,0x75636570,0x0072616c,0x00080005,0x00000084,
    0x66696e75,0x546d726f,0x75747865,0x70536572,0x6c756365,0x00007261,0x00080005,0x00000097,
    0x66696e75,0x546d726f,0x75747865,0x6d456572,0x69737369,0x00006576,0x00030047,0x0000000c,
    0x00000002,0x00040047,0x0000000e,0x0000001e,0x00000000,0x00040047,0x00000022,0x00000022,
    0x00000001,0x00040047,0x00000022,0x00000021,0x00000000,0x00040047,0x00000027,0x00000022,
    0x00000001,0x00040047,0x00000027,0x00000021,0x00000001,0x00040047,0x0000002c,0x0000001e,
    0x00000000,0x00040047,0x0000003b,0x00000022,0x00000001,0x00040047,0x0000003b,0x00000021,
    0x00000002,0x00050048,0x0000005c,0x00000000,0x00000023,0x00000000,0x00050048,0x0000005c,
    0x00000001,0x00000023,0x00000010,0x00030047,0x0000005c,0x00000002,0x00040047,0x0000005e,
    0x00000022,0x00000000,0x00040047,0x0000005e,0x00000021,0x00000000,0x00040047,0x00000084,
    0x00000022,0x00000001,0x00040047,0x00000084,0x00000021,0x00000003,0x00040047,0x00000097,
    0x00000022,0x00000001,0x00040047,0x00000097,0x00000021,0x00000004,0x00020013,0x00000002,
    0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,0x00040017,0x00000007,
    0x00000006,0x00000002,0x00040020,0x00000008,0x00000007,0x00000007,0x00040017,0x0000000a,
    0x00000006,0x00000003,0x00040018,0x0000000b,0x0000000a,0x00000003,0x0006001e,0x0000000c,
    0x0000000a,0x0000000a,0x00000007,0x0000000b,0x00040020,0x0000000d,0x00000001,0x0000000c,
    0x0004003b,0x0000000d,0x0000000e,0x00000001,0x00040015,0x0000000f,0x00000020,0x00000001,
    0x0004002b,0x0000000f,0x00000010,0x00000002,0x00040015,0x00000011,0x00000020,0x00000000,
    0x0004002b,0x00000011,0x00000012,0x00000000,0x00040020,0x00000013,0x00000001,0x00000006,
    0x0004002b,0x00000006,0x00000016,0x3f800000,0x0004002b,0x00000011,0x00000017,0x00000001,
    0x00040017,0x0000001c,0x00000006,0x00000004,0x00040020,0x0000001d,0x00000007,0x0000001c,
    0x00090019,0x0000001f,0x00000006,0x00000001,0x00000000,0x00000000,0x00000000,0x00000001,
    0x00000000,0x0003001b,0x00000020,0x0000001f,0x00040020,0x00000021,0x00000000,0x00000020,
    0x0004003b,0x00000021,0x00000022,0x00000000,0x0004003b,0x00000021,0x00000027,0x00000000,
    0x00040020,0x0000002b,0x00000003,0x0000001c,0x0004003b,0x0000002b,0x0000002c,0x00000003,
    0x0004002b,0x00000011,0x00000032,0x00000003,0x00040020,0x00000033,0x00000007,0x00000006,
    0x0004003b,0x00000021,0x0000003b,0x00000000,0x00040020,0x0000003f,0x00000007,0x0000000a,
    0x0004002b,0x00000006,0x00000043,0x3dcccccd,0x00020014,0x00000044,0x0004002b,0x0000000f,
    0x00000049,0x00000003,0x00040020,0x0000004a,0x00000001,0x0000000b,0x0004002b,0x00000006,
    0x0000004d,0x40000000,0x0004002b,0x0000000f,0x00000056,0x00000001,0x00040020,0x00000057,
    0x00000001,0x0000000a,0x0004001e,0x0000005c,0x0000000a,0x0000000a,0x00040020,0x0000005d,
    0x00000002,0x0000005c,0x0004003b,0x0000005d,0x0000005e,0x00000002,0x00040020,0x0000005f,
    0x00000002,0x0000000a,0x0004002b,0x0000000f,0x00000062,0x00000000,0x0004002b,0x00000006,
    0x0000006c,0x00000000,0x0004002b,0x00000006,0x00000081,0x41000000,0x0004003b,0x00000021,
    0x00000084,0x00000000,0x0004003b,0x00000021,0x00000097,0x00000000,0x00050036,0x00000002,
    0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003b,0x00000008,0x00000009,
    0x00000007,0x0004003b,0x0000001d,0x0000001e,0x00000007,0x0004003b,0x0000001d,0x00000026,
    0x00000007,0x0004003b,0x0000001d,0x0000003a,0x00000007,0x0004003b,0x0000003f,0x00000040,
    0x00000007,0x0004003b,0x0000003f,0x00000046,0x00000007,0x0004003b,0x0000003f,0x0000005b,
    0x00000007,0x0004003b,0x00000033,0x00000067,0x00000007,0x0004003b,0x0000003f,0x00000070,
    0x00000007,0x0004003b,0x0000003f,0x00000077,0x00000007,0x0004003b,0x00000033,0x0000007c,
    0x00000007,0x0004003b,0x0000001d,0x00000083,0x00000007,0x00060041,0x00000013,0x00000014,
    0x0000000e,0x00000010,0x00000012,0x0004003d,0x00000006,0x00000015,0x00000014,0x00060041,
    0x00000013,0x00000018,0x0000000e,0x00000010,0x00000017,0x0004003d,0x00000006,0x00000019,
    0x00000018,0x00050083,0x00000006,0x0000001a,0x00000016,0x00000019,0x00050050,0x00000007,
    0x0000001b,0x00000015,0x0000001a,0x0003003e,0x00000009,0x0000001b,0x0004003d,0x00000020,
    0x00000023,0x00000022,0x0004003d,0x00000007,0x00000024,0x00000009,0x00050057,0x0000001c,
    0x00000025,0x00000023,0x00000024,0x0003003e,0x0000001e,0x00000025,0x0004003d,0x00000020,
    0x00000028,0x00000027,0x0004003d,0x00000007,0x00000029,0x00000009,0x00050057,0x0000001c,
    0x0000002a,0x00000028,0x00000029,0x0003003e,0x00000026,0x0000002a,0x0004003d,0x0000001c,
    0x0000002d,0x0000001e,0x0008004f,0x0000000a,0x0000002e,0x0000002d,0x0000002d,0x00000000,
    0x00000001,0x00000002,0x0004003d,0x0000001c,0x0000002f,0x00000026,0x0008004f,0x0000000a,
    0x00000030,0x0000002f,0x0000002f,0x00000000,0x00000001,0x00000002,0x00050085,0x0000000a,
    0x00000031,0x0000002e,0x00000030,0x00050041,0x00000033,0x00000034,0x00000026,0x00000032,
    0x0004003d,0x00000006,0x00000035,0x00000034,0x00050051,0x00000006,0x00000036,0x00000031,
    0x00000000,0x00050051,0x00000006,0x00000037,0x00000031,0x00000001,0x00050051,0x00000006,
    0x00000038,0x00000031,0x00000002,0x00070050,0x0000001c,0x00000039,0x00000036,0x00000037,
    0x00000038,0x00000035,0x0003003e,0x0000002c,0x00000039,0x0004003d,0x00000020,0x0000003c,
    0x0000003b,0x0004003d,0x00000007,0x0000003d,0x00000009,0x00050057,0x0000001c,0x0000003e,
    0x0000003c,0x0000003d,0x0003003e,0x0000003a,0x0000003e,0x0004003d,0x0000001c,0x00000041,
    0x0000003a,0x0006000c,0x00000006,0x00000042,0x00000001,0x00000042,0x00000041,0x000500ba,
    0x00000044,0x00000045,0x00000042,0x00000043,0x000300f7,0x00000048,0x00000000,0x000400fa,
    0x00000045,0x00000047,0x00000055,0x000200f8,0x00000047,0x00050041,0x0000004a,0x0000004b,
    0x0000000e,0x00000049,0x0004003d,0x0000000b,0x0000004c,0x0000004b,0x0004003d,0x0000001c,
    0x0000004e,0x0000003a,0x0008004f,0x0000000a,0x0000004f,0x0000004e,0x0000004e,0x00000000,
    0x00000001,0x00000002,0x0005008e,0x0000000a,0x00000050,0x0000004f,0x0000004d,0x00060050,
    0x0000000a,0x00000051,0x00000016,0x00000016,0x00000016,0x00050083,0x0000000a,0x00000052,
    0x00000050,0x00000051,0x00050091,0x0000000a,0x00000053,0x0000004c,0x00000052,0x0006000c,
    0x0000000a,0x00000054,0x00000001,0x00000045,0x00000053,0x0003003e,0x00000046,0x00000054,
    0x000200f9,0x00000048,0x000200f8,0x00000055,0x00050041,0x00000057,0x00000058,0x0000000e,
    0x00000056,0x0004003d,0x0000000a,0x00000059,0x00000058,0x0003003e,0x00000046,0x00000059,
    0x000200f9,0x00000048,0x000200f8,0x00000048,0x0004003d,0x0000000a,0x0000005a,0x00000046,
    0x0003003e,0x00000040,0x0000005a,0x00050041,0x0000005f,0x00000060,0x0000005e,0x00000056,
    0x0004003d,0x0000000a,0x00000061,0x00000060,0x00050041,0x00000057,0x00000063,0x0000000e,
    0x00000062,0x0004003d,0x0000000a,0x00000064,0x00000063,0x00050083,0x0000000a,0x00000065,
    0x00000061,0x00000064,0x0006000c,0x0000000a,0x00000066,0x00000001,0x00000045,0x00000065,
    0x0003003e,0x0000005b,0x00000066,0x0004003d,0x0000000a,0x00000068,0x00000040,0x0004003d,
    0x0000000a,0x00000069,0x0000005b,0x00050094,0x00000006,0x0000006a,0x00000068,0x00000069,
    0x0003003e,0x00000067,0x0000006a,0x0004003d,0x00000006,0x0000006b,0x00000067,0x000500ba,
    0x00000044,0x0000006d,0x0000006b,0x0000006c,0x000300f7,0x0000006f,0x00000000,0x000400fa,
    0x0000006d,0x0000006e,0x0000006f,0x000200f8,0x0000006e,0x00050041,0x0000005f,0x00000071,
    0x0000005e,0x00000062,0x0004003d,0x0000000a,0x00000072,0x00000071,0x00050041,0x00000057,
    0x00000073,0x0000000e,0x00000062,0x0004003d,0x0000000a,0x00000074,0x00000073,0x00050083,
    0x0000000a,0x00000075,0x00000072,0x00000074,0x0006000c,0x0000000a,0x00000076,0x00000001,
    0x00000045,0x00000075,0x0003003e,0x00000070,0x00000076,0x0004003d,0x0000000a,0x00000078,
    0x0000005b,0x0004007f,0x0000000a,0x00000079,0x00000078,0x0004003d,0x0000000a,0x0000007a,
    0x00000040,0x0007000c,0x0000000a,0x0000007b,0x00000001,0x00000047,0x00000079,0x0000007a,
    0x0003003e,0x00000077,0x0000007b,0x0004003d,0x0000000a,0x0000007d,0x00000070,0x0004003d,
    0x0000000a,0x0000007e,0x00000077,0x00050094,0x00000006,0x0000007f,0x0000007d,0x0000007e,
    0x0007000c,0x00000006,0x00000080,0x00000001,0x00000028,0x0000007f,0x0000006c,0x0007000c,
    0x00000006,0x00000082,0x00000001,0x0000001a,0x00000080,0x00000081,0x0003003e,0x0000007c,
    0x00000082,0x0004003d,0x00000020,0x00000085,0x00000084,0x0004003d,0x00000007,0x00000086,
    0x00000009,0x00050057,0x0000001c,0x00000087,0x00000085,0x00000086,0x0003003e,0x00000083,
    0x00000087,0x0004003d,0x00000006,0x00000088,0x00000067,0x0004003d,0x0000001c,0x00000089,
    0x00000026,0x0008004f,0x0000000a,0x0000008a,0x00000089,0x00000089,0x00000000,0x00000001,
    0x00000002,0x0005008e,0x0000000a,0x0000008b,0x0000008a,0x00000088,0x0004003d,0x00000006,
    0x0000008c,0x0000007c,0x0004003d,0x0000001c,0x0000008d,0x00000083,0x0008004f,0x0000000a,
    0x0000008e,0x0000008d,0x0000008d,0x00000000,0x00000001,0x00000002,0x0005008e,0x0000000a,
    0x0000008f,0x0000008e,0x0000008c,0x00050081,0x0000000a,0x00000090,0x0000008b,0x0000008f,
    0x00050051,0x00000006,0x00000091,0x00000090,0x00000000,0x00050051,0x00000006,0x00000092,
    0x00000090,0x00000001,0x00050051,0x00000006,0x00000093,0x00000090,0x00000002,0x00070050,
    0x0000001c,0x00000094,0x00000091,0x00000092,0x00000093,0x0000006c,0x0004003d,0x0000001c,
    0x00000095,0x0000002c,0x00050081,0x0000001c,0x00000096,0x00000095,0x00000094,0x0003003e,
    0x0000002c,0x00000096,0x000200f9,0x0000006f,0x000200f8,0x0000006f,0x000100fd,0x00010038
};

#define FrameCount 2
#define MESHOUI_PROGRAM_DESC_LAYOUT 0
#define MESHOUI_MATERIAL_DESC_LAYOUT 1

using namespace Meshoui;

static DeviceVk        g_Device;
static VkInstance      g_Instance = VK_NULL_HANDLE;
static VkPipelineCache g_PipelineCache = VK_NULL_HANDLE;
static void          (*g_CheckVkResultFn)(VkResult err) = nullptr;
static SwapChainVk     g_SwapChain;
static MoPipeline      g_Pipeline = {};
static uint32_t        g_FrameIndex = 0;

template <typename T, size_t N> size_t countof(T (& arr)[N]) { return std::extent<T[N]>::value; }

static constexpr MoFloat3 operator * (const MoFloat3 & a, float b) { return {a.x*b,a.y*b,a.z*b}; }
static constexpr MoFloat3 operator + (const MoFloat3 & a, const MoFloat3 & b) { return {a.x+b.x,a.y+b.y,a.z+b.z}; }
static constexpr MoFloat2 operator - (const MoFloat2 & a, const MoFloat2 & b) { return {a.x-b.x,a.y-b.y}; }
static constexpr MoFloat3 operator - (const MoFloat3 & a, const MoFloat3 & b) { return {a.x-b.x,a.y-b.y,a.z-b.z}; }
static constexpr bool     operator ==(const MoFloat2 & a, const MoFloat2 & b) { return a.x==b.x&&a.y==b.y; }
static constexpr bool     operator ==(const MoFloat3 & a, const MoFloat3 & b) { return a.x==b.x&&a.y==b.y&&a.z==b.z; }
static constexpr MoFloat3         min(const MoFloat3 & a, const MoFloat3 & b) { return { std::min(a.x,b.x),std::min(a.y,b.y),std::min(a.z,b.z)}; }
static constexpr MoFloat3         max(const MoFloat3 & a, const MoFloat3 & b) { return { std::max(a.x,b.x),std::max(a.y,b.y),std::max(a.z,b.z)}; }
static           float            dot(const MoFloat3 & a, const MoFloat3 & b) { return std::inner_product(&a.x, &a.x+3, &b.x, 0.0f); }
static constexpr MoFloat3       cross(const MoFloat3 & a, const MoFloat3 & b) { return {a.y*b.z-a.z*b.y, a.z*b.x-a.x*b.z, a.x*b.y-a.y*b.x}; }
static           MoFloat3   normalize(const MoFloat3 & a)                     { return a * (1.0f / std::sqrt(dot(a, a))); }

static void generateTexture(ImageBufferVk & imageBuffer, const uint8_t* texture, const VkExtent2D & textureExtent, MoFloat3 fallbackColor, VkCommandPool commandPool, VkCommandBuffer commandBuffer)
{
    VkFormat format = VK_FORMAT_R8G8B8A8_UNORM;
    unsigned width = 0, height = 0;
    std::vector<uint8_t> data;
    const uint8_t* dataPtr = texture;
    VkDeviceSize size = textureExtent.width * textureExtent.height * 4;
    if (dataPtr == nullptr)
    {
        // use fallback
        width = height = 1;
        data.resize(4);
        data[0] = (uint8_t)(fallbackColor.x * 0xFF);
        data[1] = (uint8_t)(fallbackColor.y * 0xFF);
        data[2] = (uint8_t)(fallbackColor.z * 0xFF);
        data[3] = (uint8_t)(            1.0 * 0xFF);
        dataPtr = data.data();
        size = data.size();
    }

    // begin
    VkResult err = vkResetCommandPool(g_Device.device, commandPool, 0);
    g_CheckVkResultFn(err);
    VkCommandBufferBeginInfo begin_info = {};
    begin_info.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
    begin_info.flags |= VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT;
    err = vkBeginCommandBuffer(commandBuffer, &begin_info);
    g_CheckVkResultFn(err);

    // create buffer
    g_Device.createBuffer(imageBuffer, {width, height, 1}, format, VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT, VK_IMAGE_ASPECT_COLOR_BIT);

    // upload
    DeviceBufferVk upload;
    g_Device.createBuffer(upload, size, VK_BUFFER_USAGE_TRANSFER_SRC_BIT);
    g_Device.uploadBuffer(upload, size, dataPtr);
    g_Device.transferBuffer(upload, imageBuffer, {width, height, 1}, commandBuffer);

    // end
    VkSubmitInfo end_info = {};
    end_info.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
    end_info.commandBufferCount = 1;
    end_info.pCommandBuffers = &commandBuffer;
    err = vkEndCommandBuffer(commandBuffer);
    g_CheckVkResultFn(err);
    err = vkQueueSubmit(g_Device.queue, 1, &end_info, VK_NULL_HANDLE);
    g_CheckVkResultFn(err);

    // wait
    err = vkDeviceWaitIdle(g_Device.device);
    g_CheckVkResultFn(err);

    g_Device.deleteBuffer(upload);
}

typedef struct MoVertexP {
    MoFloat3 position;
    MoFloat2 texcoord;
    MoFloat3 normal;
    MoFloat3 tangent;
    MoFloat3 bitangent;
} MoVertexP;

struct MoMesh_T
{
    DeviceBufferVk vertexBuffer;
    DeviceBufferVk indexBuffer;
    size_t indexBufferSize;
};

struct MoMaterial_T
{
    VkSampler ambientSampler;
    VkSampler diffuseSampler;
    VkSampler normalSampler;
    VkSampler specularSampler;
    VkSampler emissiveSampler;
    // this descriptor set uses only immutable samplers, one set per swapchain
    VkDescriptorSet descriptorSet;
    ImageBufferVk ambientImage;
    ImageBufferVk diffuseImage;
    ImageBufferVk normalImage;
    ImageBufferVk specularImage;
    ImageBufferVk emissiveImage;
};

struct MoPipeline_T
{
    VkPipelineLayout pipelineLayout;
    VkPipeline pipeline;
    // the buffers bound to this descriptor set may change frame to frame, one set per frame
    VkDescriptorSetLayout descriptorSetLayout[MESHOUI_MATERIAL_DESC_LAYOUT+1];
    VkDescriptorSet descriptorSet[FrameCount];
    DeviceBufferVk uniformBuffer[FrameCount];
};

void moInit(MoInitInfo *info)
{
    g_Instance = info->instance;
    g_Device.physicalDevice = info->physicalDevice;
    g_Device.device = info->device;
    g_Device.queueFamily = info->queueFamily;
    g_Device.queue = info->queue;
    g_PipelineCache = info->pipelineCache;
    g_Device.descriptorPool = info->descriptorPool;
    g_SwapChain.swapChainKHR = info->swapChainKHR;
    g_SwapChain.renderPass = info->renderPass;
    g_SwapChain.extent = info->extent;
    g_SwapChain.frames.resize(info->swapChainCommandBufferCount);
    for (uint32_t i = 0; i < info->swapChainCommandBufferCount; ++i)
    {
        g_SwapChain.frames[i].pool = info->pSwapChainCommandBuffers[i].pool;
        g_SwapChain.frames[i].buffer = info->pSwapChainCommandBuffers[i].buffer;
        g_SwapChain.frames[i].fence = info->pSwapChainCommandBuffers[i].fence;
        g_SwapChain.frames[i].acquired = info->pSwapChainCommandBuffers[i].acquired;
        g_SwapChain.frames[i].complete = info->pSwapChainCommandBuffers[i].complete;
    }
    g_SwapChain.images.resize(info->swapChainImageBufferCount);
    for (uint32_t i = 0; i < info->swapChainImageBufferCount; ++i)
    {
        g_SwapChain.images[i].back = info->pSwapChainImageBuffers[i].back;
        g_SwapChain.images[i].view = info->pSwapChainImageBuffers[i].view;
        g_SwapChain.images[i].front = info->pSwapChainImageBuffers[i].front;
    }
    g_Device.allocator = info->pAllocator;
    g_CheckVkResultFn = info->pCheckVkResultFn;

    MoPipelineCreateInfo pipelineCreateInfo = {};

    pipelineCreateInfo.pVertexShader = glsl_shader_vert_spv;
    pipelineCreateInfo.vertexShaderSize = sizeof(glsl_shader_vert_spv);
    pipelineCreateInfo.pFragmentShader = glsl_shader_frag_spv;
    pipelineCreateInfo.fragmentShaderSize = sizeof(glsl_shader_frag_spv);

    moCreatePipeline(&pipelineCreateInfo, &g_Pipeline);
}

void moShutdown()
{
    moDestroyPipeline(g_Pipeline);
    g_Pipeline = VK_NULL_HANDLE;

    g_Instance = VK_NULL_HANDLE;
    g_Device.physicalDevice = VK_NULL_HANDLE;
    g_Device.device = VK_NULL_HANDLE;
    g_Device.queueFamily = -1;
    g_Device.queue = VK_NULL_HANDLE;
    g_Device.memoryAlignment = 256;
    g_SwapChain.swapChainKHR = VK_NULL_HANDLE;
    g_SwapChain.renderPass = VK_NULL_HANDLE;
    g_SwapChain.extent = {0, 0};
    g_SwapChain.frames = {};
    g_SwapChain.images = {};
    g_PipelineCache = VK_NULL_HANDLE;
    g_Device.descriptorPool = VK_NULL_HANDLE;
    g_Device.allocator = VK_NULL_HANDLE;
    g_CheckVkResultFn = nullptr;
}

typedef struct MoPushConstant
{
    MoFloat4x4 model;
    MoFloat4x4 view;
    MoFloat4x4 projection;
} MoPushConstant;

typedef struct MoUniform
{
    alignas(16) MoFloat3 camera;
    alignas(16) MoFloat3 light;
} MoUniform;

void moCreatePipeline(const MoPipelineCreateInfo *pCreateInfo, MoPipeline *pPipeline)
{
    MoPipeline pipeline = *pPipeline = new MoPipeline_T();

    VkResult err;
    VkShaderModule vert_module;
    VkShaderModule frag_module;

    {
        VkShaderModuleCreateInfo vert_info = {};
        vert_info.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
        vert_info.codeSize = pCreateInfo->vertexShaderSize;
        vert_info.pCode = pCreateInfo->pVertexShader;
        err = vkCreateShaderModule(g_Device.device, &vert_info, g_Device.allocator, &vert_module);
        g_CheckVkResultFn(err);
        VkShaderModuleCreateInfo frag_info = {};
        frag_info.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
        frag_info.codeSize = pCreateInfo->fragmentShaderSize;
        frag_info.pCode = pCreateInfo->pFragmentShader;
        err = vkCreateShaderModule(g_Device.device, &frag_info, g_Device.allocator, &frag_module);
        g_CheckVkResultFn(err);
    }

    {
        VkDescriptorSetLayoutBinding binding[2];
        binding[0].binding = 0;
        binding[0].descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
        binding[0].descriptorCount = 1;
        binding[0].stageFlags = VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_VERTEX_BIT;
        binding[1].binding = 1;
        binding[1].descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
        binding[1].descriptorCount = 1;
        binding[1].stageFlags = VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_VERTEX_BIT;

        VkDescriptorSetLayoutCreateInfo info = {};
        info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
        info.bindingCount = (uint32_t)countof(binding);
        info.pBindings = binding;
        err = vkCreateDescriptorSetLayout(g_Device.device, &info, g_Device.allocator, &pipeline->descriptorSetLayout[MESHOUI_PROGRAM_DESC_LAYOUT]);
        g_CheckVkResultFn(err);
    }

    {
        VkDescriptorSetLayoutBinding binding[5];
        for (uint32_t i = 0; i < 5; ++i)
        {
            binding[i].binding = i;
            binding[i].descriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
            binding[i].descriptorCount = 1;
            binding[i].stageFlags = VK_SHADER_STAGE_FRAGMENT_BIT;
            binding[i].pImmutableSamplers = VK_NULL_HANDLE;
        }
        VkDescriptorSetLayoutCreateInfo info = {};
        info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
        info.bindingCount = (uint32_t)countof(binding);
        info.pBindings = binding;
        err = vkCreateDescriptorSetLayout(g_Device.device, &info, g_Device.allocator, &pipeline->descriptorSetLayout[MESHOUI_MATERIAL_DESC_LAYOUT]);
        g_CheckVkResultFn(err);
    }

    {
        VkDescriptorSetLayout descriptorSetLayout[FrameCount] = {};
        for (size_t i = 0; i < FrameCount; ++i)
            descriptorSetLayout[i] = pipeline->descriptorSetLayout[MESHOUI_PROGRAM_DESC_LAYOUT];
        VkDescriptorSetAllocateInfo alloc_info = {};
        alloc_info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
        alloc_info.descriptorPool = g_Device.descriptorPool;
        alloc_info.descriptorSetCount = FrameCount;
        alloc_info.pSetLayouts = descriptorSetLayout;
        err = vkAllocateDescriptorSets(g_Device.device, &alloc_info, pipeline->descriptorSet);
        g_CheckVkResultFn(err);
    }

    for (size_t i = 0; i < FrameCount; ++i)
    {
        g_Device.createBuffer(pipeline->uniformBuffer[i], sizeof(MoUniform), VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT);

        VkDescriptorBufferInfo bufferInfo[1] = {};
        bufferInfo[0].buffer = pipeline->uniformBuffer[i].buffer;
        bufferInfo[0].offset = 0;
        bufferInfo[0].range = sizeof(MoUniform);

        VkWriteDescriptorSet descriptorWrite[1] = {};
        descriptorWrite[0].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
        descriptorWrite[0].dstSet = pipeline->descriptorSet[i];
        descriptorWrite[0].dstBinding = 0;
        descriptorWrite[0].dstArrayElement = 0;
        descriptorWrite[0].descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
        descriptorWrite[0].descriptorCount = 1;
        descriptorWrite[0].pBufferInfo = &bufferInfo[0];

        vkUpdateDescriptorSets(g_Device.device, 1, descriptorWrite, 0, nullptr);
    }

    {
        // model, view & projection
        std::vector<VkPushConstantRange> push_constants;
        push_constants.emplace_back(VkPushConstantRange{VK_SHADER_STAGE_VERTEX_BIT, 0, sizeof(MoPushConstant)});
        VkPipelineLayoutCreateInfo layout_info = {};
        layout_info.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
        layout_info.setLayoutCount = (uint32_t)countof(pipeline->descriptorSetLayout);
        layout_info.pSetLayouts = pipeline->descriptorSetLayout;
        layout_info.pushConstantRangeCount = (uint32_t)push_constants.size();
        layout_info.pPushConstantRanges = push_constants.data();
        err = vkCreatePipelineLayout(g_Device.device, &layout_info, g_Device.allocator, &pipeline->pipelineLayout);
        g_CheckVkResultFn(err);
    }

    VkPipelineShaderStageCreateInfo stage[2] = {};
    stage[0].sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
    stage[0].stage = VK_SHADER_STAGE_VERTEX_BIT;
    stage[0].module = vert_module;
    stage[0].pName = "main";
    stage[1].sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
    stage[1].stage = VK_SHADER_STAGE_FRAGMENT_BIT;
    stage[1].module = frag_module;
    stage[1].pName = "main";

    VkVertexInputBindingDescription binding_desc[1] = {};
    binding_desc[0].stride = sizeof(MoVertexP);
    binding_desc[0].inputRate = VK_VERTEX_INPUT_RATE_VERTEX;

    std::vector<VkVertexInputAttributeDescription> attribute_desc;
    attribute_desc.emplace_back(VkVertexInputAttributeDescription{uint32_t(attribute_desc.size()), binding_desc[0].binding, VK_FORMAT_R32G32B32_SFLOAT, offsetof(struct MoVertexP, position)});
    attribute_desc.emplace_back(VkVertexInputAttributeDescription{uint32_t(attribute_desc.size()), binding_desc[0].binding, VK_FORMAT_R32G32_SFLOAT,    offsetof(struct MoVertexP, texcoord)});
    attribute_desc.emplace_back(VkVertexInputAttributeDescription{uint32_t(attribute_desc.size()), binding_desc[0].binding, VK_FORMAT_R32G32B32_SFLOAT, offsetof(struct MoVertexP, normal)});
    attribute_desc.emplace_back(VkVertexInputAttributeDescription{uint32_t(attribute_desc.size()), binding_desc[0].binding, VK_FORMAT_R32G32B32_SFLOAT, offsetof(struct MoVertexP, tangent)});
    attribute_desc.emplace_back(VkVertexInputAttributeDescription{uint32_t(attribute_desc.size()), binding_desc[0].binding, VK_FORMAT_R32G32B32_SFLOAT, offsetof(struct MoVertexP, bitangent)});

    VkPipelineVertexInputStateCreateInfo vertex_info = {};
    vertex_info.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
    vertex_info.vertexBindingDescriptionCount = 1;
    vertex_info.pVertexBindingDescriptions = binding_desc;
    vertex_info.vertexAttributeDescriptionCount = (uint32_t)attribute_desc.size();
    vertex_info.pVertexAttributeDescriptions = attribute_desc.data();

    VkPipelineInputAssemblyStateCreateInfo inputAssembly = {};
    inputAssembly.sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
    inputAssembly.topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;

    VkPipelineViewportStateCreateInfo viewport_info = {};
    viewport_info.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
    viewport_info.viewportCount = 1;
    viewport_info.scissorCount = 1;

    VkPipelineRasterizationStateCreateInfo raster_info = {};
    raster_info.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
    raster_info.polygonMode = VK_POLYGON_MODE_FILL;
    raster_info.cullMode = VK_CULL_MODE_BACK_BIT;
    raster_info.frontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE;
    raster_info.lineWidth = 1.0f;

    VkPipelineMultisampleStateCreateInfo ms_info = {};
    ms_info.sType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
    ms_info.rasterizationSamples = VK_SAMPLE_COUNT_1_BIT;

    VkPipelineColorBlendAttachmentState color_attachment[1] = {};
    color_attachment[0].blendEnable = VK_TRUE;
    color_attachment[0].srcColorBlendFactor = VK_BLEND_FACTOR_SRC_ALPHA;
    color_attachment[0].dstColorBlendFactor = VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
    color_attachment[0].colorBlendOp = VK_BLEND_OP_ADD;
    color_attachment[0].srcAlphaBlendFactor = VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
    color_attachment[0].dstAlphaBlendFactor = VK_BLEND_FACTOR_ZERO;
    color_attachment[0].alphaBlendOp = VK_BLEND_OP_ADD;
    color_attachment[0].colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;

    VkPipelineDepthStencilStateCreateInfo depth_info = {};
    depth_info.sType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
    depth_info.depthTestEnable = VK_TRUE;
    depth_info.depthWriteEnable = VK_TRUE;
    depth_info.depthCompareOp = VK_COMPARE_OP_LESS;
    depth_info.depthBoundsTestEnable = VK_FALSE;
    depth_info.stencilTestEnable = VK_FALSE;

    VkPipelineColorBlendStateCreateInfo blend_info = {};
    blend_info.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
    blend_info.attachmentCount = 1;
    blend_info.pAttachments = color_attachment;

    VkDynamicState dynamic_states[2] = { VK_DYNAMIC_STATE_VIEWPORT, VK_DYNAMIC_STATE_SCISSOR };
    VkPipelineDynamicStateCreateInfo dynamic_state = {};
    dynamic_state.sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
    dynamic_state.dynamicStateCount = (uint32_t)countof(dynamic_states);
    dynamic_state.pDynamicStates = dynamic_states;

    VkGraphicsPipelineCreateInfo info = {};
    info.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
    info.flags = 0;
    info.stageCount = 2;
    info.pStages = stage;
    info.pVertexInputState = &vertex_info;
    info.pInputAssemblyState = &inputAssembly;
    info.pViewportState = &viewport_info;
    info.pRasterizationState = &raster_info;
    info.pMultisampleState = &ms_info;
    info.pDepthStencilState = &depth_info;
    info.pColorBlendState = &blend_info;
    info.pDynamicState = &dynamic_state;
    info.layout = pipeline->pipelineLayout;
    info.renderPass = g_SwapChain.renderPass;
    err = vkCreateGraphicsPipelines(g_Device.device, g_PipelineCache, 1, &info, g_Device.allocator, &pipeline->pipeline);
    g_CheckVkResultFn(err);

    vkDestroyShaderModule(g_Device.device, frag_module, nullptr);
    vkDestroyShaderModule(g_Device.device, vert_module, nullptr);
}

void moDestroyPipeline(MoPipeline pipeline)
{
    vkQueueWaitIdle(g_Device.queue);
    for (size_t i = 0; i < FrameCount; ++i) { g_Device.deleteBuffer(pipeline->uniformBuffer[i]); }
    vkDestroyDescriptorSetLayout(g_Device.device, pipeline->descriptorSetLayout[MESHOUI_PROGRAM_DESC_LAYOUT], g_Device.allocator);
    vkDestroyDescriptorSetLayout(g_Device.device, pipeline->descriptorSetLayout[MESHOUI_MATERIAL_DESC_LAYOUT], g_Device.allocator);
    vkDestroyPipelineLayout(g_Device.device, pipeline->pipelineLayout, g_Device.allocator);
    vkDestroyPipeline(g_Device.device, pipeline->pipeline, g_Device.allocator);
    pipeline->descriptorSetLayout[MESHOUI_PROGRAM_DESC_LAYOUT] = VK_NULL_HANDLE;
    pipeline->descriptorSetLayout[MESHOUI_MATERIAL_DESC_LAYOUT] = VK_NULL_HANDLE;
    pipeline->pipelineLayout = VK_NULL_HANDLE;
    pipeline->pipeline = VK_NULL_HANDLE;
    memset(&pipeline->uniformBuffer, 0, sizeof(pipeline->uniformBuffer));
    memset(&pipeline->descriptorSet, 0, sizeof(pipeline->descriptorSet));
    delete pipeline;
}

void moCreateMesh(const MoMeshCreateInfo *pCreateInfo, MoMesh *pMesh)
{
    MoMesh mesh = *pMesh = new MoMesh_T();

    // tangent + bitangent
    std::vector<MoVertexP> vertices; vertices.reserve(pCreateInfo->vertexCount);
    std::vector<uint32_t> indices; indices.reserve(pCreateInfo->indexCount);
    if (pCreateInfo->indicesCountFromOne == VK_TRUE)
    {
        for (uint32_t i = 0; i < pCreateInfo->indexCount; i++) { indices.push_back(pCreateInfo->pIndices[i] - 1); }
    }
    for (uint32_t i = 0; i < indices.size(); i+=3)
    {
        uint32_t j1 = indices[i+0];
        uint32_t j2 = indices[i+1];
        uint32_t j3 = indices[i+2];

        // triangle
        MoVertexP v1, v2, v3; v1 = v2 = v3 = {};
        v1.position = pCreateInfo->pVertices[j1].position;
        v2.position = pCreateInfo->pVertices[j2].position;
        v3.position = pCreateInfo->pVertices[j3].position;
        v1.normal   = pCreateInfo->pVertices[j1].normal;
        v2.normal   = pCreateInfo->pVertices[j2].normal;
        v3.normal   = pCreateInfo->pVertices[j3].normal;
        v1.texcoord = pCreateInfo->pVertices[j1].texcoord;
        v2.texcoord = pCreateInfo->pVertices[j2].texcoord;
        v3.texcoord = pCreateInfo->pVertices[j3].texcoord;

        if (pCreateInfo->discardNormals == VK_TRUE)
        {
            const MoFloat3 a = v2.position - v1.position;
            const MoFloat3 b = v3.position - v1.position;
            v1.normal = v2.normal = v3.normal = normalize(cross(a, b));
        }

        const MoFloat3 edge1 = v2.position - v1.position;
        const MoFloat3 edge2 = v3.position - v1.position;
        const MoFloat2 deltaUV1 = v2.texcoord - v1.texcoord;
        const MoFloat2 deltaUV2 = v3.texcoord - v1.texcoord;

        float f = deltaUV1.x * deltaUV2.y - deltaUV2.x * deltaUV1.y;
        if (f != 0.f)
        {
            f = 1.0f / f;

            v1.tangent.x = f * (deltaUV2.y * edge1.x - deltaUV1.y * edge2.x);
            v1.tangent.y = f * (deltaUV2.y * edge1.y - deltaUV1.y * edge2.y);
            v1.tangent.z = f * (deltaUV2.y * edge1.z - deltaUV1.y * edge2.z);
            v1.tangent = v2.tangent = v3.tangent = normalize(v1.tangent);
            v1.bitangent.x = f * (-deltaUV2.x * edge1.x + deltaUV1.x * edge2.x);
            v1.bitangent.y = f * (-deltaUV2.x * edge1.y + deltaUV1.x * edge2.y);
            v1.bitangent.z = f * (-deltaUV2.x * edge1.z + deltaUV1.x * edge2.z);
            v1.bitangent = v2.bitangent = v3.bitangent = normalize(v1.bitangent);
        }
        else
        {
            v1.tangent = v2.tangent = v3.tangent = {1.f, 0.f, 0.f};
            v1.bitangent = v2.bitangent = v3.bitangent = {0.f, 0.f, 1.f};
        }
        vertices.push_back(v1);
        vertices.push_back(v2);
        vertices.push_back(v3);
    }

    mesh->indexBufferSize = indices.size();
    const VkDeviceSize vertex_size = vertices.size() * sizeof(MoVertexP);
    const VkDeviceSize index_size = indices.size() * sizeof(uint32_t);
    g_Device.createBuffer(mesh->vertexBuffer, vertex_size, VK_BUFFER_USAGE_VERTEX_BUFFER_BIT);
    g_Device.createBuffer(mesh->indexBuffer, index_size, VK_BUFFER_USAGE_INDEX_BUFFER_BIT);
    g_Device.uploadBuffer(mesh->vertexBuffer, vertex_size, vertices.data());
    g_Device.uploadBuffer(mesh->indexBuffer, index_size, indices.data());
}

void moDestroyMesh(MoMesh mesh)
{
    vkQueueWaitIdle(g_Device.queue);
    g_Device.deleteBuffer(mesh->vertexBuffer);
    g_Device.deleteBuffer(mesh->indexBuffer);
    delete mesh;
}

void moCreateMaterial(const MoMaterialCreateInfo *pCreateInfo, MoMaterial *pMaterial)
{
    MoMaterial material = *pMaterial = new MoMaterial_T();

    auto & frame = g_SwapChain.frames[g_FrameIndex];
    generateTexture(material->ambientImage,  pCreateInfo->pTextureAmbient,  pCreateInfo->textureAmbientExtent,  pCreateInfo->colorAmbient,  frame.pool, frame.buffer);
    generateTexture(material->diffuseImage,  pCreateInfo->pTextureDiffuse,  pCreateInfo->textureDiffuseExtent,  pCreateInfo->colorDiffuse,  frame.pool, frame.buffer);
    generateTexture(material->normalImage,   pCreateInfo->pTextureNormal,   pCreateInfo->textureNormalExtent,   {0.f, 0.f, 0.f},            frame.pool, frame.buffer);
    generateTexture(material->emissiveImage, pCreateInfo->pTextureEmissive, pCreateInfo->textureEmissiveExtent, pCreateInfo->colorEmissive, frame.pool, frame.buffer);
    generateTexture(material->specularImage, pCreateInfo->pTextureSpecular, pCreateInfo->textureSpecularExtent, pCreateInfo->colorSpecular, frame.pool, frame.buffer);

    VkResult err;
    {
        VkSamplerCreateInfo info = {};
        info.sType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;
        info.magFilter = VK_FILTER_LINEAR;
        info.minFilter = VK_FILTER_LINEAR;
        info.mipmapMode = VK_SAMPLER_MIPMAP_MODE_LINEAR;
        info.addressModeU = VK_SAMPLER_ADDRESS_MODE_REPEAT;
        info.addressModeV = VK_SAMPLER_ADDRESS_MODE_REPEAT;
        info.addressModeW = VK_SAMPLER_ADDRESS_MODE_REPEAT;
        info.minLod = -1000;
        info.maxLod = 1000;
        info.maxAnisotropy = 1.0f;
        err = vkCreateSampler(g_Device.device, &info, g_Device.allocator, &material->ambientSampler);
        g_CheckVkResultFn(err);
        err = vkCreateSampler(g_Device.device, &info, g_Device.allocator, &material->diffuseSampler);
        g_CheckVkResultFn(err);
        err = vkCreateSampler(g_Device.device, &info, g_Device.allocator, &material->normalSampler);
        g_CheckVkResultFn(err);
        err = vkCreateSampler(g_Device.device, &info, g_Device.allocator, &material->specularSampler);
        g_CheckVkResultFn(err);
        err = vkCreateSampler(g_Device.device, &info, g_Device.allocator, &material->emissiveSampler);
        g_CheckVkResultFn(err);
    }

    {
        VkDescriptorSetAllocateInfo alloc_info = {};
        alloc_info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
        alloc_info.descriptorPool = g_Device.descriptorPool;
        alloc_info.descriptorSetCount = 1;
        if (pCreateInfo->setLayout != VK_NULL_HANDLE)
            alloc_info.pSetLayouts = &pCreateInfo->setLayout;
        else
            alloc_info.pSetLayouts = &g_Pipeline->descriptorSetLayout[MESHOUI_MATERIAL_DESC_LAYOUT];
        err = vkAllocateDescriptorSets(g_Device.device, &alloc_info, &material->descriptorSet);
        g_CheckVkResultFn(err);
    }

    {
        VkDescriptorImageInfo desc_image[5] = {};
        desc_image[0].sampler = material->ambientSampler;
        desc_image[0].imageView = material->ambientImage.view;
        desc_image[0].imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
        desc_image[1].sampler = material->diffuseSampler;
        desc_image[1].imageView = material->diffuseImage.view;
        desc_image[1].imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
        desc_image[2].sampler = material->normalSampler;
        desc_image[2].imageView = material->normalImage.view;
        desc_image[2].imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
        desc_image[3].sampler = material->specularSampler;
        desc_image[3].imageView = material->specularImage.view;
        desc_image[3].imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
        desc_image[4].sampler = material->emissiveSampler;
        desc_image[4].imageView = material->emissiveImage.view;
        desc_image[4].imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
        VkWriteDescriptorSet write_desc[5] = {};
        for (uint32_t i = 0; i < 5; ++i)
        {
            write_desc[i].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
            write_desc[i].dstSet = material->descriptorSet;
            write_desc[i].dstBinding = i;
            write_desc[i].descriptorCount = 1;
            write_desc[i].descriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
            write_desc[i].pImageInfo = &desc_image[i];
        }
        vkUpdateDescriptorSets(g_Device.device, 5, write_desc, 0, nullptr);
    }
}

void moDestroyMaterial(MoMaterial material)
{
    vkQueueWaitIdle(g_Device.queue);
    g_Device.deleteBuffer(material->ambientImage);
    g_Device.deleteBuffer(material->diffuseImage);
    g_Device.deleteBuffer(material->normalImage);
    g_Device.deleteBuffer(material->specularImage);
    g_Device.deleteBuffer(material->emissiveImage);

    vkDestroySampler(g_Device.device, material->ambientSampler, g_Device.allocator);
    vkDestroySampler(g_Device.device, material->diffuseSampler, g_Device.allocator);
    vkDestroySampler(g_Device.device, material->normalSampler, g_Device.allocator);
    vkDestroySampler(g_Device.device, material->specularSampler, g_Device.allocator);
    vkDestroySampler(g_Device.device, material->emissiveSampler, g_Device.allocator);
    delete material;
}

void moNewFrame(uint32_t frameIndex)
{
    g_FrameIndex = frameIndex;
    auto & frame = g_SwapChain.frames[g_FrameIndex];
    vkCmdBindPipeline(frame.buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, g_Pipeline->pipeline);
    vkCmdBindDescriptorSets(frame.buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, g_Pipeline->pipelineLayout, 0, 1, &g_Pipeline->descriptorSet[g_FrameIndex], 0, nullptr);
}

void moSetPMV(const MoFloat4x4 &projection, const MoFloat4x4 &model, const MoFloat4x4 &view)
{
    static MoPushConstant g_PushConstant = {};
    g_PushConstant.projection = projection;
    g_PushConstant.model = model;
    g_PushConstant.view = view;
    auto & frame = g_SwapChain.frames[g_FrameIndex];
    vkCmdPushConstants(frame.buffer, g_Pipeline->pipelineLayout, VK_SHADER_STAGE_VERTEX_BIT, 0, sizeof(MoPushConstant), &g_PushConstant);
}

void moSetLight(const MoFloat3 &light, const MoFloat3 &camera)
{
    static MoUniform g_Uniform = {};
    g_Uniform.light = light;
    g_Uniform.camera = camera;
    g_Device.uploadBuffer(g_Pipeline->uniformBuffer[g_FrameIndex], sizeof(MoUniform), &g_Uniform);
}

void moBindMesh(MoMesh mesh)
{
    VkDeviceSize offset = 0;
    auto & frame = g_SwapChain.frames[g_FrameIndex];
    vkCmdBindVertexBuffers(frame.buffer, 0, 1, &mesh->vertexBuffer.buffer, &offset);
    vkCmdBindIndexBuffer(frame.buffer, mesh->indexBuffer.buffer, 0, VK_INDEX_TYPE_UINT32);
}

void moBindMaterial(MoMaterial material)
{
    auto & frame = g_SwapChain.frames[g_FrameIndex];
    vkCmdBindDescriptorSets(frame.buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, g_Pipeline->pipelineLayout, 1, 1, &material->descriptorSet, 0, nullptr);
}

/*
------------------------------------------------------------------------------
This software is available under 2 licenses -- choose whichever you prefer.
------------------------------------------------------------------------------
ALTERNATIVE A - MIT License
Copyright (c) 2018 Patrick Pelletier
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
------------------------------------------------------------------------------
ALTERNATIVE B - Public Domain (www.unlicense.org)
This is free and unencumbered software released into the public domain.
Anyone is free to copy, modify, publish, use, compile, sell, or distribute this
software, either in source code form or as a compiled binary, for any purpose,
commercial or non-commercial, and by any means.
In jurisdictions that recognize copyright laws, the author or authors of this
software dedicate any and all copyright interest in the software to the public
domain. We make this dedication for the benefit of the public at large and to
the detriment of our heirs and successors. We intend this dedication to be an
overt act of relinquishment in perpetuity of all present and future rights to
this software under copyright law.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
------------------------------------------------------------------------------
*/
